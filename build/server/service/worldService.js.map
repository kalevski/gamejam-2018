{"version":3,"sources":["../../../server/service/worldService.js"],"names":["ArenaWorldService","worldDao","command","message","object","JSON","parse","cond1","cond2","cond3","worldId","sendStatus","get","then","world","type","out","user","data","update","status","send","toAll","id","generate","index","Math","floor","random","worldData","worldList","turnTime","description","deadFields","create","instance","getInstance"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEMA,iB;;;;aAEFC,Q,GAAW,wB;aAEXC,O,GAAU;AACN,yCADM;AAEN,2DAFM;AAGN,yCAHM;AAIN;AAJM,S;;;;;qCAOGC,O,EAAS;AAClB,gBAAIC,SAASC,KAAKC,KAAL,CAAWH,OAAX,CAAb;AACA,gBAAII,QAAQ,OAAOH,OAAO,MAAP,CAAP,KAA0B,WAAtC;AACA,gBAAII,QAAQ,OAAOJ,OAAO,MAAP,CAAP,KAA0B,WAAtC;AACA,gBAAIK,QAAQ,QAAOL,OAAO,MAAP,CAAP,MAA0B,QAAtC;;AAEA,gBAAIG,SAASC,KAAT,IAAkBC,KAAtB,EAA6B;AACzB,uBAAOL,MAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAP;AACH;AACJ;;;6BAEIM,O,EAASR,O,EAASS,U,EAAY;AAAA;;AAC/B,mBAAO,KAAKV,QAAL,CAAcW,GAAd,CAAkBF,OAAlB,EAA2BG,IAA3B,CAAgC,UAACC,KAAD,EAAW;AAC9C,oBAAI,OAAO,MAAKZ,OAAL,CAAaA,QAAQa,IAArB,CAAP,KAAsC,UAA1C,EAAsD;AAClD,wBAAIC,MAAM,MAAKd,OAAL,CAAaA,QAAQa,IAArB,EAA2Bb,QAAQe,IAAnC,EAAyCf,QAAQgB,IAAjD,EAAuDJ,KAAvD,CAAV;AACA,0BAAKb,QAAL,CAAckB,MAAd,CAAqBH,IAAIF,KAAzB,EAAgCD,IAAhC,CAAqC,UAACC,KAAD,EAAW;AAC5C,4BAAIE,IAAII,MAAJ,CAAWC,IAAf,EAAqB;AACjBV,uCAAWG,KAAX,EAAkBZ,QAAQe,IAA1B,EAAgCD,IAAII,MAAJ,CAAWE,KAA3C;AACH;AACJ,qBAJD;AAKH,iBAPD,MAOO;AACH,2BAAO,IAAP;AACH;AACJ,aAXM,CAAP;AAYH;;;iCAEQZ,O,EAAS;AACd,mBAAO,KAAKT,QAAL,CAAcW,GAAd,CAAkBF,OAAlB,CAAP;AACH;;;sCAEa;AACV,gBAAII,QAAQ,wBAAZ;AACAA,kBAAMS,EAAN,GAAW,kBAAX;AACA,iBAAKC,QAAL,CAAcV,KAAd;AACA,mBAAOA,MAAMS,EAAb;AACH;;;iCAEQT,K,EAAO;AACZ;AACA,gBAAIW,QAAQC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,IAAhB,GAAuB,CAAlC,CAAZ;AACA,gBAAIC,YAAY,sBAAY,sBAAYC,SAAZ,CAAsBL,KAAtB,CAAZ,CAAhB;AACAX,kBAAMC,IAAN,GAAa,sBAAYe,SAAZ,CAAsBL,KAAtB,CAAb;AACAX,kBAAMiB,QAAN,GAAiB,sBAAYA,QAA7B;AACAjB,kBAAMkB,WAAN,GAAoBH,UAAUG,WAA9B;AACAlB,kBAAMmB,UAAN,GAAmBJ,UAAUI,UAA7B;AACA,iBAAKhC,QAAL,CAAciC,MAAd,CAAqBpB,KAArB;AACH;;;;;;AAGL,IAAIqB,WAAW,IAAf;AACAnC,kBAAkBoC,WAAlB,GAAgC,YAAW;AACvC,QAAID,aAAa,IAAjB,EAAuB;AACnBA,mBAAW,IAAInC,iBAAJ,EAAX;AACH;AACD,WAAOmC,QAAP;AACH,CALD;;kBAOenC,iB","file":"worldService.js","sourcesContent":["import generateUuid from 'uuid/v4'; \nimport WorldDto from '../dto/worldDto';\nimport WorldDao from '../dao/worldDao';\nimport worldConfig from '../config/worldConfig';\n\nimport joinCommand from './command/joinCommand';\nimport removeActionsCommand from './command/removeActionsCommand';\nimport moveCommand from './command/moveCommand';\nimport pushActionCommand from './command/pushActionCommand';\n\nclass ArenaWorldService {\n  \n    worldDao = new WorldDao();\n\n    command = {\n        'join': joinCommand,\n        'removeActions': removeActionsCommand,\n        'move': moveCommand,\n        'pushAction': pushActionCommand\n    };\n\n    buildCommand(message) {\n        let object = JSON.parse(message);\n        let cond1 = typeof object['type'] !== 'undefined';\n        let cond2 = typeof object['user'] !== 'undefined';\n        let cond3 = typeof object['data'] === 'object';\n        \n        if (cond1 && cond2 && cond3) {\n            return object;\n        } else {\n            return null;\n        }\n    }\n\n    exec(worldId, command, sendStatus) {\n        return this.worldDao.get(worldId).then((world) => {\n            if (typeof this.command[command.type] === 'function') {\n                let out = this.command[command.type](command.user, command.data, world);\n                this.worldDao.update(out.world).then((world) => {\n                    if (out.status.send) {\n                        sendStatus(world, command.user, out.status.toAll);\n                    }\n                });\n            } else {\n                return null;\n            }\n        });\n    }\n\n    getWorld(worldId) {\n        return this.worldDao.get(worldId);\n    }\n\n    createWorld() {\n        var world = new WorldDto();\n        world.id = generateUuid();\n        this.generate(world);\n        return world.id;\n    }   \n\n    generate(world) {\n        // make choise about world\n        let index = Math.floor(Math.random() * 2.99 + 1);\n        var worldData = worldConfig[worldConfig.worldList[index]];\n        world.type = worldConfig.worldList[index];\n        world.turnTime = worldConfig.turnTime;\n        world.description = worldData.description;\n        world.deadFields = worldData.deadFields;\n        this.worldDao.create(world);\n    }\n}\n\nvar instance = null;\nArenaWorldService.getInstance = function() {\n    if (instance === null) {\n        instance = new ArenaWorldService();\n    }\n    return instance;\n}\n\nexport default ArenaWorldService;"]}