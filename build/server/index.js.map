{"version":3,"sources":["../../server/index.js"],"names":["Api","logger","getInstance","process","env","WEBAPP_INDEX","WEBAPP_STATIC","WEBAPP_ASSETS","i","__dirname","fork","NPM_CONFIG_PRODUCTION","which","error"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;IAEMA,G;AAIF,mBAAc;AAAA;;AAAA,aAFdC,MAEc,GAFL,iBAAOC,WAAP,EAEK;;AACVC,gBAAQC,GAAR,CAAY,cAAZ,IAA8B,iBAAYC,YAA1C;AACAF,gBAAQC,GAAR,CAAY,eAAZ,IAA+B,iBAAYE,aAA3C;AACAH,gBAAQC,GAAR,CAAY,eAAZ,IAA+B,iBAAYG,aAA3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;;;iCAEQ;AACL,gBAAIH,sBAAJ;AACA,gBAAI,OAAOD,QAAQC,GAAR,CAAY,KAAZ,CAAP,KAA8B,WAAlC,EAA+C;AAC3C,oBAAID,QAAQC,GAAR,CAAY,KAAZ,MAAuB,KAA3B,EAAkC;AAC9BA;AACH;AACJ;;AAEDA,gBAAI,eAAJ,IAAuB,QAAvB;AACA,iBAAK,IAAII,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AACxBJ,oBAAI,aAAJ,IAAqBI,CAArB;AACAJ,oBAAI,MAAJ,IAAcK,SAAd;AACA,kCAAQC,IAAR,CAAaN,GAAb;AACH;;AAEDA,gBAAI,eAAJ,IAAuB,WAAvB;AACAA,gBAAI,aAAJ,IAAqB,WAArB;AACA,8BAAQM,IAAR,CAAaN,GAAb;AACH;;;gCAEO;AACJ,gBAAID,QAAQC,GAAR,CAAY,eAAZ,MAAiC,QAArC,EAA+C;AAC3C;AACH,aAFD,MAEO,IAAID,QAAQC,GAAR,CAAY,eAAZ,MAAiC,WAArC,EAAkD;AACrD;AACH;AACJ;;;uCAEc;AACX,gBAAID,QAAQC,GAAR,CAAYO,qBAAhB,EAAuC;AACnC,uBAAO,IAAP;AACH;AACD,gBAAI,CAAC,kBAAMC,KAAN,CAAY,OAAZ,CAAL,EAA2B;AACvB,qBAAKX,MAAL,CAAYY,KAAZ,CAAkB,2CAAlB;AACH,aAFD,MAEO,IAAI,CAAC,kBAAMD,KAAN,CAAY,WAAZ,CAAL,EAA+B;AAClC,qBAAKX,MAAL,CAAYY,KAAZ,CAAkB,kDAAlB;AACH,aAFM,MAEA;AACH,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;;;;AAGL,IAAIb,GAAJ","file":"index.js","sourcesContent":["import cluster from 'cluster';\nimport os from 'os';\nimport shell from 'shelljs';\nimport Router from './router';\nimport Processor from './processor';\nimport Logger from './helper/logger';\n\nimport DEV_CONFIG from './config.dev';\nimport PROD_CONFIG from './config.prod';\n\nclass Api {\n\n    logger = Logger.getInstance();\n\n    constructor() {\n        process.env['WEBAPP_INDEX'] = PROD_CONFIG.WEBAPP_INDEX;\n        process.env['WEBAPP_STATIC'] = PROD_CONFIG.WEBAPP_STATIC;\n        process.env['WEBAPP_ASSETS'] = PROD_CONFIG.WEBAPP_ASSETS;\n        new Router();\n        // if (cluster.isMaster) {\n        //     if (this.checkMachine()) {\n        //         this.master();\n        //     }\n        // } else {\n        //     this.slave();\n        // }\n    }\n\n    master() {\n        var env = PROD_CONFIG;\n        if (typeof process.env['ENV'] !== 'undefined') {\n            if (process.env['ENV'] === 'DEV') {\n                env = DEV_CONFIG;\n            }\n        }\n\n        env['INSTANCE_TYPE'] = 'router';\n        for (let i = 0; i < 1; i++) { \n            env['INSTANCE_ID'] = i;\n            env['ROOT'] = __dirname;\n            cluster.fork(env);\n        }\n\n        env['INSTANCE_TYPE'] = 'processor';\n        env['INSTANCE_ID'] = 'scheduler';\n        cluster.fork(env);\n    }\n\n    slave() {\n        if (process.env['INSTANCE_TYPE'] === 'router') {\n            new Router();\n        } else if (process.env['INSTANCE_TYPE'] === 'processor') {\n            new Processor();\n        }\n    }\n\n    checkMachine() {\n        if (process.env.NPM_CONFIG_PRODUCTION) {\n            return true;\n        }\n        if (!shell.which('mysql')) {\n            this.logger.error('You need to install MySQL to run this app');\n        } else if (!shell.which('redis-cli')) {\n            this.logger.error('You need to install Redis Server to run this app');\n        } else {\n            return true;\n        }\n        return false;\n    }\n}\n\nnew Api();\n\n"]}