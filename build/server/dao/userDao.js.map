{"version":3,"sources":["../../../server/dao/userDao.js"],"names":["UserDao","storage","getInstance","nickname","Promise","resolve","reject","get","err","reply","JSON","parse","user","set","stringify","del"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,O;;;;aAEFC,O,GAAU,kBAAQC,WAAR,E;;;;;4BAENC,Q,EAAU;AAAA;;AACV,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,sBAAKL,OAAL,CAAaM,GAAb,CAAiB,UAAUJ,QAA3B,EAAqC,UAACK,GAAD,EAAMC,KAAN,EAAgB;AACjD,wBAAID,GAAJ,EAAS;AACLF,+BAAOE,GAAP;AACH,qBAFD,MAEO;AACHH,gCAAQK,KAAKC,KAAL,CAAWF,KAAX,CAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;+BAEMG,I,EAAM;AAAA;;AACT,mBAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKL,OAAL,CAAaY,GAAb,CAAiB,UAAUD,KAAKT,QAAhC,EAA0CO,KAAKI,SAAL,CAAeF,IAAf,CAA1C,EAAgE,UAACJ,GAAD,EAAMC,KAAN,EAAgB;AAC5E,wBAAID,GAAJ,EAAS;AACLF,+BAAOE,GAAP;AACH,qBAFD,MAEO;AACHH,gCAAQO,IAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;+BAEMA,I,EAAM;AAAA;;AACT,mBAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKL,OAAL,CAAaY,GAAb,CAAiB,UAAUD,KAAKT,QAAhC,EAA0CO,KAAKI,SAAL,CAAeF,IAAf,CAA1C,EAAgE,UAACJ,GAAD,EAAMC,KAAN,EAAgB;AAC5E,wBAAID,GAAJ,EAAS;AACLF,+BAAOE,GAAP;AACH,qBAFD,MAEO;AACHH,gCAAQO,IAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;+BAEMT,Q,EAAU;AAAA;;AACb,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKL,OAAL,CAAac,GAAb,CAAiB,UAAUZ,QAA3B,EAAqC,UAACK,GAAD,EAAMC,KAAN,EAAgB;AACjD,wBAAID,GAAJ,EAAS;AACLF,+BAAOE,GAAP;AACH,qBAFD,MAEO;AACHH;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;;;;kBAGUL,O","file":"userDao.js","sourcesContent":["import Storage from '../adapter/storage';\n\nclass UserDao {\n    \n    storage = Storage.getInstance();\n\n    get(nickname) {\n        return new Promise((resolve, reject) => {\n            this.storage.get('user:' + nickname, (err, reply) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(JSON.parse(reply));\n                }\n            });\n        });\n    }\n    \n    create(user) {\n        return new Promise((resolve, reject) => {\n            this.storage.set('user:' + user.nickname, JSON.stringify(user), (err, reply) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(user);\n                }\n            });\n        });\n    }\n\n    update(user) {\n        return new Promise((resolve, reject) => {\n            this.storage.set('user:' + user.nickname, JSON.stringify(user), (err, reply) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(user);\n                }\n            });\n        });\n    }\n\n    remove(nickname) {\n        return new Promise((resolve, reject) => {\n            this.storage.del('user:' + nickname, (err, reply) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n}\n\nexport default UserDao;"]}