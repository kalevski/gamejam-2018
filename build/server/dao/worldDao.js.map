{"version":3,"sources":["../../../server/dao/worldDao.js"],"names":["WorldDao","storage","getInstance","worldId","Promise","resolve","reject","get","err","reply","JSON","parse","world","set","id","stringify","del"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,Q;;;;aAEFC,O,GAAU,kBAAQC,WAAR,E;;;;;4BAENC,O,EAAS;AAAA;;AACT,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,sBAAKL,OAAL,CAAaM,GAAb,CAAiB,WAAWJ,OAA5B,EAAqC,UAACK,GAAD,EAAMC,KAAN,EAAgB;AACjD,wBAAID,GAAJ,EAAS;AACLF,+BAAOE,GAAP;AACH,qBAFD,MAEO;AACHH,gCAAQK,KAAKC,KAAL,CAAWF,KAAX,CAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;+BAEMG,K,EAAO;AAAA;;AACV,mBAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKL,OAAL,CAAaY,GAAb,CAAiB,WAAWD,MAAME,EAAlC,EAAsCJ,KAAKK,SAAL,CAAeH,KAAf,CAAtC,EAA6D,UAACJ,GAAD,EAAMC,KAAN,EAAgB;AACzE,wBAAID,GAAJ,EAAS;AACLF,+BAAOE,GAAP;AACH,qBAFD,MAEO;AACHH,gCAAQO,KAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;+BAEMA,K,EAAO;AAAA;;AACV,mBAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKL,OAAL,CAAaY,GAAb,CAAiB,WAAWD,MAAME,EAAlC,EAAsCJ,KAAKK,SAAL,CAAeH,KAAf,CAAtC,EAA6D,UAACJ,GAAD,EAAMC,KAAN,EAAgB;AACzE,wBAAID,GAAJ,EAAS;AACLF,+BAAOE,GAAP;AACH,qBAFD,MAEO;AACHH,gCAAQO,KAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;+BAEMT,O,EAAS;AAAA;;AACZ,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKL,OAAL,CAAae,GAAb,CAAiB,WAAWb,OAA5B,EAAqC,UAACK,GAAD,EAAMC,KAAN,EAAgB;AACjD,wBAAID,GAAJ,EAAS;AACLF,+BAAOE,GAAP;AACH,qBAFD,MAEO;AACHH;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;;;;kBAGUL,Q","file":"worldDao.js","sourcesContent":["import Storage from '../adapter/storage';\n\nclass WorldDao {\n   \n    storage = Storage.getInstance();\n\n    get(worldId) {\n        return new Promise((resolve, reject) => {\n            this.storage.get('world:' + worldId, (err, reply) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(JSON.parse(reply));\n                }\n            });\n        });\n    }\n    \n    create(world) {\n        return new Promise((resolve, reject) => {\n            this.storage.set('world:' + world.id, JSON.stringify(world), (err, reply) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(world);\n                }\n            });\n        });\n    }\n\n    update(world) {\n        return new Promise((resolve, reject) => {\n            this.storage.set('world:' + world.id, JSON.stringify(world), (err, reply) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(world);\n                }\n            });\n        });\n    }\n\n    remove(worldId) {\n        return new Promise((resolve, reject) => {\n            this.storage.del('world:' + worldId, (err, reply) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n}\n\nexport default WorldDao;"]}